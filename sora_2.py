def generate_sora2_video(arguments):
    import os
    import sys
    import time
    from openai import OpenAI
    
    prompt = arguments['prompt']
    model = "sora-2"
    openai_api_key = None
    openai_organization = None
    
    if 'model' in arguments:
        model = arguments['model']
    
    if 'openai_api_key' in arguments:
        openai_api_key = arguments['openai_api_key']
    else:
        openai_api_key = os.getenv('OPENAI_API_KEY')
    
    if 'openai_organization' in arguments:
        openai_organization = arguments['openai_organization']
    else:
        openai_organization = os.getenv('OPENAI_ORG_ID')
    
    if not openai_api_key:
        raise ValueError("API –∫–ª—é—á OpenAI –Ω–µ —É–∫–∞–∑–∞–Ω. –£–∫–∞–∂–∏—Ç–µ openai_api_key –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
    
    if openai_organization:
        openai = OpenAI(api_key=openai_api_key, organization=openai_organization)
    else:
        openai = OpenAI(api_key=openai_api_key)
    
    video = openai.videos.create(
        model=model,
        prompt=prompt,
    )
    
    print("Video generation started:", video)
    
    progress = getattr(video, "progress", 0)
    bar_length = 30
    
    while video.status in ("in_progress", "queued"):
        # Refresh status
        video = openai.videos.retrieve(video.id)
        progress = getattr(video, "progress", 0)
        filled_length = int((progress / 100) * bar_length)
        bar = "=" * filled_length + "-" * (bar_length - filled_length)
        status_text = "Queued" if video.status == "queued" else "Processing"
        sys.stdout.write(f"\r{status_text}: [{bar}] {progress:.1f}%")
        sys.stdout.flush()
        time.sleep(2)
    
    # Move to next line after progress loop
    sys.stdout.write("\n")
    
    if video.status == "failed":
        message = getattr(
            getattr(video, "error", None), "message", "Video generation failed"
        )
        print(message)
        raise RuntimeError(f"Video generation failed: {message}")
    
    print("Video generation completed:", video)
    print("Downloading video content...")
    
    content = openai.videos.download_content(video.id, variant="video")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –≤–∏–¥–µ–æ
    # content –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ SDK OpenAI
    import tempfile
    
    video_bytes = None
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤
    try:
        if isinstance(content, bytes):
            video_bytes = content
        elif hasattr(content, 'read'):
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª–æ–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º read
            if hasattr(content, 'seek'):
                content.seek(0)
            video_bytes = content.read()
        elif hasattr(content, 'content'):
            # –ï—Å–ª–∏ —ç—Ç–æ response –æ–±—ä–µ–∫—Ç
            video_bytes = content.content
        else:
            # –ï—Å–ª–∏ content –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ write_to_file, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —á–∏—Ç–∞–µ–º –±–∞–π—Ç—ã
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.mp4')
            try:
                content.write_to_file(temp_file.name)
                with open(temp_file.name, 'rb') as f:
                    video_bytes = f.read()
            finally:
                os.unlink(temp_file.name)
    except Exception as e:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–π—Ç—ã –≤–∏–¥–µ–æ: {str(e)}")
    
    if video_bytes is None or len(video_bytes) == 0:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–π—Ç—ã –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
    
    print(f"Video size: {len(video_bytes) / 1024 / 1024:.2f} MB")
    
    print("Uploading video to temp.sh...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ temp.sh —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    import requests
    
    video_filename = f"sora_video_{video.id}.mp4"
    
    try:
        # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ temp.sh:
        # POST –∑–∞–ø—Ä–æ—Å –Ω–∞ https://temp.sh/upload
        # files={"file": (filename, bytes, content_type)}
        # –û—Ç–≤–µ—Ç: –ø—Ä–æ—Å—Ç–æ URL –≤ —Ç–µ–∫—Å—Ç–µ (–Ω–µ JSON!)
        
        response = requests.post(
            "https://temp.sh/upload",
            files={"file": (video_filename, video_bytes, "video/mp4")},
            timeout=60
        )
        
        if response.status_code == 200:
            # temp.sh –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –Ω–∞–ø—Ä—è–º—É—é –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
            download_url = response.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ URL
            if download_url.startswith('http'):
                print(f"‚úÖ Video uploaded successfully to temp.sh!")
                print(f"üì• Download link: {download_url}")
                print("‚ÑπÔ∏è  File will be automatically deleted after download")
                return download_url
            else:
                raise RuntimeError(
                    f"temp.sh returned unexpected response format. "
                    f"Expected URL, got: {download_url[:200]}"
                )
        else:
            raise RuntimeError(
                f"Failed to upload file to temp.sh: HTTP {response.status_code} - {response.text[:500]}"
            )
    
    except requests.exceptions.RequestException as e:
        raise RuntimeError(f"Network error while uploading to temp.sh: {str(e)}")
    
    except Exception as e:
        raise RuntimeError(f"Failed to upload file to temp.sh: {str(e)}")
